/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as swapi from './types/backingTypes'

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  Greeting: {
    // input type
    language?: NexusGenEnums['Language'] | null // Language
    name: string // String!
  }
  GreetingOptions: {
    // input type
    prefix?: string | null // String
  }
}

export interface NexusGenEnums {
  Episode: 5 | 6 | 4
  Language: 'EN' | 'SL'
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenRootTypes {
  Human: {
    // root type
    id: string // ID!
    name: string // String!
  }
  Query: {}
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  Greeting: NexusGenInputs['Greeting']
  GreetingOptions: NexusGenInputs['GreetingOptions']
  Episode: NexusGenEnums['Episode']
  Language: NexusGenEnums['Language']
  String: NexusGenScalars['String']
  Int: NexusGenScalars['Int']
  Float: NexusGenScalars['Float']
  Boolean: NexusGenScalars['Boolean']
  ID: NexusGenScalars['ID']
}

export interface NexusGenFieldTypes {
  Human: {
    // field return type
    appearsIn: NexusGenEnums['Episode'][] // [Episode!]!
    homePlanet: string | null // String
    id: string // ID!
    name: string // String!
  }
  Query: {
    // field return type
    greeting: string // String!
    human: NexusGenRootTypes['Human'] | null // Human
    humans: NexusGenRootTypes['Human'][] // [Human!]!
  }
}

export interface NexusGenArgTypes {
  Query: {
    greeting: {
      // args
      input: NexusGenInputs['Greeting'] // Greeting!
    }
    human: {
      // args
      id: string // ID!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = 'Human' | 'Query'

export type NexusGenInputNames = 'Greeting' | 'GreetingOptions'

export type NexusGenEnumNames = 'Episode' | 'Language'

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = 'Boolean' | 'Float' | 'ID' | 'Int' | 'String'

export type NexusGenUnionNames = never

export interface NexusGenTypes {
  context: swapi.ContextType
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  allTypes: NexusGenAllTypes
  inheritedFields: NexusGenInheritedFields
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
}
